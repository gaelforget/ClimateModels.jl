var documenterSearchIndex = {"docs":
[{"location":"functionalities/#manual","page":"Manual","title":"User Guide","text":"","category":"section"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"Here we document key functionalities offered in ClimateModels.jl","category":"page"},{"location":"functionalities/#Climate-Model-Interface","page":"Manual","title":"Climate Model Interface","text":"","category":"section"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"The climate model interface is based on a data structure (ModelConfig) and a series of methods like setup and launch. The default assumption is that the model is either 1) a Julia package to be downloaded from a URL within setup using Pkg, and run within launch using Pkg.test or 2) a Julia function to be called with a ModelConfig argument. ","category":"page"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"A key point is that everything can be customized to e.g. 1) use a custom workflow instead of Pkg.test or 2) use popular models previously written in Fortran or C just as simply. The latter typically involves calling a build method to compile the model between setup and launch.","category":"page"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"Leveraging the interface in real world application essentially means :","category":"page"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"Define a concrete type ModelConfig (optional).\nCustomize interface methods to best suit your chosen model.","category":"page"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"At first, one can skip the type definition (#1 above) and may only want to customize setup and launch for #2 (see examples 1, 2, and 3).","category":"page"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"However, the idea is that for routine use of e.g. a popular model the customized interface elements would be provided via a dedicated package (e.g. MITgcmTools.jl). These customized interfaces would thus be maintained independently by developers and users most familiar with each model.","category":"page"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"This approach is illustrated in the general circulation model example that uses the customized interface elements provided by MITgcmTools.jl for MITgcm.","category":"page"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"ModelConfig","category":"page"},{"location":"functionalities/#ClimateModels.ModelConfig","page":"Manual","title":"ClimateModels.ModelConfig","text":"struct ModelConfig <: AbstractModelConfig\n\nmodel :: Union{Function,String,Pkg.Types.PackageSpec} = \"anonymous\"\nconfiguration :: Union{Function,String} = \"anonymous\"\noptions :: OrderedDict{Any,Any} = OrderedDict{Any,Any}()\ninputs :: OrderedDict{Any,Any} = OrderedDict{Any,Any}()\noutputs :: OrderedDict{Any,Any} = OrderedDict{Any,Any}()\nstatus :: OrderedDict{Any,Any} = OrderedDict{Any,Any}()\nchannel :: Channel{Any} = Channel{Any}(10) \nfolder :: String = tempdir()\nID :: UUID = UUIDs.uuid4()\n\n\n\n\n\n","category":"type"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"setup\nbuild\ncompile\nclean\nlaunch\nmonitor","category":"page"},{"location":"functionalities/#ClimateModels.setup","page":"Manual","title":"ClimateModels.setup","text":"setup(x)\n\nDefaults to default_ClimateModelSetup(x). Can be expected to be  specialized for most concrete types of AbstractModelConfig\n\nusing ClimateModels\ntmp=ModelConfig(model=ClimateModels.RandomWalker)\nsetup(tmp)\n\nisa(tmp,AbstractModelConfig)\n\n# output\n\ntrue\n\n\n\n\n\n","category":"function"},{"location":"functionalities/#ClimateModels.build","page":"Manual","title":"ClimateModels.build","text":"build(x)\n\nDefaults to default_ClimateModelBuild(x). Can be expected to be  specialized for most concrete types of AbstractModelConfig\n\nusing ClimateModels, Pkg\ntmp0=PackageSpec(url=\"https://github.com/JuliaOcean/AirSeaFluxes.jl\")\ntmp=ModelConfig(model=tmp0,configuration=\"anonymous\")\nsetup(tmp)\nbuild(tmp)\n\nisa(tmp,AbstractModelConfig)\n\n# output\n\ntrue\n\n\n\n\n\n","category":"function"},{"location":"functionalities/#ClimateModels.compile","page":"Manual","title":"ClimateModels.compile","text":"compile(x)\n\nDefaults to default_ClimateModelBuild(x). Can be expected to be  specialized for most concrete types of AbstractModelConfig\n\nusing ClimateModels, Pkg\ntmp0=PackageSpec(url=\"https://github.com/JuliaOcean/AirSeaFluxes.jl\")\ntmp=ModelConfig(model=tmp0)\nsetup(tmp)\ncompile(tmp)\n\nisa(tmp,AbstractModelConfig)\n\n# output\n\ntrue\n\n\n\n\n\n","category":"function"},{"location":"functionalities/#ClimateModels.clean","page":"Manual","title":"ClimateModels.clean","text":"clean(x :: AbstractModelConfig)\n\nCancel any remaining task (x.channel) and clean the run directory (via rm)\n\ntmp=ModelConfig(model=ClimateModels.RandomWalker)\nsetup(tmp)\nclean(tmp)\n\n\n\n\n\n","category":"function"},{"location":"functionalities/#ClimateModels.launch","page":"Manual","title":"ClimateModels.launch","text":"launch(x)\n\nDefaults to default_ClimateModelLaunch(x) which consists in take!(x) for AbstractModelConfig. Can be expected to be specialized for most  concrete types of AbstractModelConfig\n\ntmp=ModelConfig(model=ClimateModels.RandomWalker)\nsetup(tmp)\nlaunch(tmp)\n\n\n\n\n\n","category":"function"},{"location":"functionalities/#ClimateModels.monitor","page":"Manual","title":"ClimateModels.monitor","text":"monitor(x)\n\nShow x.status[end] by default.\n\ntmp=ModelConfig(model=ClimateModels.RandomWalker)\nsetup(tmp)\nmonitor(tmp)\n\n\n\n\n\n","category":"function"},{"location":"functionalities/#API-Reference","page":"Manual","title":"API Reference","text":"","category":"section"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"","category":"page"},{"location":"functionalities/#Git-Support","page":"Manual","title":"Git Support","text":"","category":"section"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"The setup method normally calls git_log_init to set up a temporary run folder with a git enabled subfolder called log. This allows for recording each workflow step, using functions listed here for example.","category":"page"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"git_log_init\ngit_log_msg\ngit_log_fil\ngit_log_prm\ngit_log_show","category":"page"},{"location":"functionalities/#ClimateModels.git_log_init","page":"Manual","title":"ClimateModels.git_log_init","text":"git_log_init(x :: AbstractModelConfig)\n\nCreate log subfolder, initialize git, and commit initial README.md\n\n\n\n\n\n","category":"function"},{"location":"functionalities/#ClimateModels.git_log_msg","page":"Manual","title":"ClimateModels.git_log_msg","text":"git_log_msg(x :: AbstractModelConfig,msg,commit_msg)\n\nAdd message msg to the log/README.md file and git commit.\n\n\n\n\n\n","category":"function"},{"location":"functionalities/#ClimateModels.git_log_fil","page":"Manual","title":"ClimateModels.git_log_fil","text":"git_log_fil(x :: AbstractModelConfig,fil,commit_msg)\n\nCommit changes to file log/fil with message commit_msg. If log/fil is  unknown to git (i.e. commit errors out) then try adding log/fil first. \n\n\n\n\n\n","category":"function"},{"location":"functionalities/#ClimateModels.git_log_prm","page":"Manual","title":"ClimateModels.git_log_prm","text":"git_log_prm(x :: AbstractModelConfig,msg,commit_msg)\n\nAdd files found in tracked_parameters/ (if any) to git log.\n\n\n\n\n\n","category":"function"},{"location":"functionalities/#ClimateModels.git_log_show","page":"Manual","title":"ClimateModels.git_log_show","text":"git_log_show(x :: AbstractModelConfig)\n\nShow git log.\n\n\n\n\n\n","category":"function"},{"location":"functionalities/#Cloud-Support","page":"Manual","title":"Cloud Support","text":"","category":"section"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"There are various ways that model output gets archived, distributed, and retrieved from the internet. In some cases downloading data can be the most convenient approach. In others it can be more advantageous to compute in the cloud and only download final results for plotting (e.g. cmip).","category":"page"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"cmip","category":"page"},{"location":"functionalities/#ClimateModels.cmip","page":"Manual","title":"ClimateModels.cmip","text":"cmip(institution_id,source_id,variable_id)\n\nAccess CMIP6 climate model archive (https://bit.ly/2WiWmoh) via AWS.jl and Zarr.jl and compute (1) time mean global map and (2) time evolving global mean.\n\nThis example was partly inspired by @rabernat 's https://bit.ly/2VRMgvl notebook\n\nusing ClimateModels\n(mm,gm,meta)=cmip()\nnm=meta[\"long_name\"]*\" in \"*meta[\"units\"]\n\nusing Plots\nheatmap(mm[\"lon\"], mm[\"lat\"], transpose(mm[\"m\"]),\n        title=nm*\" (time mean)\")\nplot(gm[\"t\"][1:12:end],gm[\"y\"][1:12:end],xlabel=\"time\",ylabel=nm,\n     title=meta[\"institution_id\"]*\" (global mean, month by month)\")\ndisplay.([plot!(gm[\"t\"][i:12:end],gm[\"y\"][i:12:end], leg = false) for i in 2:12])\n\n\n\n\n\n\n\n","category":"function"},{"location":"generated/CMIP6/","page":"CMIP6 Models (Cloud Archive)","title":"CMIP6 Models (Cloud Archive)","text":"EditURL = \"https://github.com/gaelforget/ClimateModels.jl/blob/master/examples/CMIP6.jl\"","category":"page"},{"location":"generated/CMIP6/#CMIP6-Models-(Cloud-Archive)","page":"CMIP6 Models (Cloud Archive)","title":"CMIP6 Models (Cloud Archive)","text":"","category":"section"},{"location":"generated/CMIP6/","page":"CMIP6 Models (Cloud Archive)","title":"CMIP6 Models (Cloud Archive)","text":"This example relies on model output that has already been computed and made available over the internet. It accesses model output via the AWS.jl and Zarr.jl packages as the starting point for further modeling / computation. Workflow summary:","category":"page"},{"location":"generated/CMIP6/","page":"CMIP6 Models (Cloud Archive)","title":"CMIP6 Models (Cloud Archive)","text":"Access climate model output in cloud storage\nChoose model (institution_id, source_id, variable_id)\nCompute, save, and plot (1. global mean over time; 2. time mean global map)","category":"page"},{"location":"generated/CMIP6/","page":"CMIP6 Models (Cloud Archive)","title":"CMIP6 Models (Cloud Archive)","text":"using ClimateModels, Plots, Statistics, TOML, CSV, DataFrames, NetCDF","category":"page"},{"location":"generated/CMIP6/#Model-Configuration","page":"CMIP6 Models (Cloud Archive)","title":"Model Configuration","text":"","category":"section"},{"location":"generated/CMIP6/","page":"CMIP6 Models (Cloud Archive)","title":"CMIP6 Models (Cloud Archive)","text":"Here we select that we want to access temperature (tas) from a model run by IPSL as part of CMIP6 (Coupled Model Intercomparison Project Phase 6).","category":"page"},{"location":"generated/CMIP6/","page":"CMIP6 Models (Cloud Archive)","title":"CMIP6 Models (Cloud Archive)","text":"parameters=Dict(\"institution_id\" => \"IPSL\", \"source_id\" => \"IPSL-CM6A-LR\", \"variable_id\" => \"tas\")\n\nfunction GlobalAverage(x)\n\n    #main computation = model run = access cloud storage + compute averages\n\n    (mm,gm,meta)=cmip(x.inputs[\"institution_id\"],x.inputs[\"source_id\"],x.inputs[\"variable_id\"])\n\n    #save results to files\n\n    fil=joinpath(x.folder,string(x.ID),\"GlobalAverages.csv\")\n    df = DataFrame(time = gm[\"t\"], tas = gm[\"y\"])\n    CSV.write(fil, df)\n\n    fil=joinpath(x.folder,string(x.ID),\"Details.toml\")\n    open(fil, \"w\") do io\n        TOML.print(io, meta)\n    end\n\n    filename = joinpath(x.folder,string(x.ID),\"MeanMaps.nc\")\n    varname  = x.inputs[\"variable_id\"]\n    (ni,nj)=size(mm[\"m\"])\n    nccreate(filename, \"tas\", \"lon\", collect(Float32.(mm[\"lon\"][:])), \"lat\", collect(Float32.(mm[\"lat\"][:])), atts=meta)\n    ncwrite(Float32.(mm[\"m\"]), filename, varname)\n\n    return x\nend\n\nMC=ModelConfig(model=\"GlobalAverage\",configuration=GlobalAverage,inputs=parameters)","category":"page"},{"location":"generated/CMIP6/#Setup-and-Launch","page":"CMIP6 Models (Cloud Archive)","title":"Setup and Launch","text":"","category":"section"},{"location":"generated/CMIP6/","page":"CMIP6 Models (Cloud Archive)","title":"CMIP6 Models (Cloud Archive)","text":"_Note: this step may take most time, since launch is where data is accessed over the internet, and computation takes place.","category":"page"},{"location":"generated/CMIP6/","page":"CMIP6 Models (Cloud Archive)","title":"CMIP6 Models (Cloud Archive)","text":"setup(MC)\nlaunch(MC)","category":"page"},{"location":"generated/CMIP6/#Read-Output-Files","page":"CMIP6 Models (Cloud Archive)","title":"Read Output Files","text":"","category":"section"},{"location":"generated/CMIP6/","page":"CMIP6 Models (Cloud Archive)","title":"CMIP6 Models (Cloud Archive)","text":"The GlobalAverage function, called via launch, should now have generated the following output:","category":"page"},{"location":"generated/CMIP6/","page":"CMIP6 Models (Cloud Archive)","title":"CMIP6 Models (Cloud Archive)","text":"Global averages in a CSV file\nMeta-data in a TOML file\nMaps + meta-data in a NetCDF file","category":"page"},{"location":"generated/CMIP6/","page":"CMIP6 Models (Cloud Archive)","title":"CMIP6 Models (Cloud Archive)","text":"fil=joinpath(MC.folder,string(MC.ID),\"MeanMaps.nc\")\nlon = NetCDF.open(fil, \"lon\")\nlat = NetCDF.open(fil, \"lat\")\ntas = NetCDF.open(fil, \"tas\")","category":"page"},{"location":"generated/CMIP6/","page":"CMIP6 Models (Cloud Archive)","title":"CMIP6 Models (Cloud Archive)","text":"fil=joinpath(MC.folder,string(MC.ID),\"Details.toml\")\nmeta=TOML.parsefile(fil)","category":"page"},{"location":"generated/CMIP6/","page":"CMIP6 Models (Cloud Archive)","title":"CMIP6 Models (Cloud Archive)","text":"fil=joinpath(MC.folder,string(MC.ID),\"GlobalAverages.csv\")\nGA=CSV.read(fil,DataFrame)\nshow(GA,truncate=8)","category":"page"},{"location":"generated/CMIP6/#Plot-Results","page":"CMIP6 Models (Cloud Archive)","title":"Plot Results","text":"","category":"section"},{"location":"generated/CMIP6/","page":"CMIP6 Models (Cloud Archive)","title":"CMIP6 Models (Cloud Archive)","text":"Plots below are based on results from the output file(s) shown above.","category":"page"},{"location":"generated/CMIP6/#.-Time-Mean-Seasonal-Cycle","page":"CMIP6 Models (Cloud Archive)","title":"1. Time Mean Seasonal Cycle","text":"","category":"section"},{"location":"generated/CMIP6/","page":"CMIP6 Models (Cloud Archive)","title":"CMIP6 Models (Cloud Archive)","text":"nm=meta[\"long_name\"]*\" in \"*meta[\"units\"]\n\nny=Int(length(GA.time)/12)\ny=fill(0.0,(ny,12))\n[y[:,i].=GA.tas[i:12:end] for i in 1:12]\n\ns=plot([0.5:1:11.5],vec(mean(y,dims=1)), xlabel=\"month\",ylabel=nm,\nleg = false, title=meta[\"institution_id\"]*\" (global mean, seasonal cycle)\",frmt=:png)","category":"page"},{"location":"generated/CMIP6/#.-Month-By-Month-Time-Series","page":"CMIP6 Models (Cloud Archive)","title":"2. Month By Month Time Series","text":"","category":"section"},{"location":"generated/CMIP6/","page":"CMIP6 Models (Cloud Archive)","title":"CMIP6 Models (Cloud Archive)","text":"p=plot(GA.time[1:12:end],GA.tas[1:12:end],xlabel=\"time\",ylabel=nm,\ntitle=meta[\"institution_id\"]*\" (global mean, Month By Month)\",frmt=:png)\n[plot!(GA.time[i:12:end],GA.tas[i:12:end], leg = false) for i in 2:12];\np","category":"page"},{"location":"generated/CMIP6/#.-Time-Mean-Global-Map","page":"CMIP6 Models (Cloud Archive)","title":"3. Time Mean Global Map","text":"","category":"section"},{"location":"generated/CMIP6/","page":"CMIP6 Models (Cloud Archive)","title":"CMIP6 Models (Cloud Archive)","text":"m=heatmap(lon[:], lat[:], permutedims(tas[:,:]), title=nm*\" (time mean)\")","category":"page"},{"location":"generated/CMIP6/","page":"CMIP6 Models (Cloud Archive)","title":"CMIP6 Models (Cloud Archive)","text":"","category":"page"},{"location":"generated/CMIP6/","page":"CMIP6 Models (Cloud Archive)","title":"CMIP6 Models (Cloud Archive)","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/ShallowWaters/","page":"Shallow Water Model (Julia)","title":"Shallow Water Model (Julia)","text":"EditURL = \"https://github.com/gaelforget/ClimateModels.jl/blob/master/examples/ShallowWaters.jl\"","category":"page"},{"location":"generated/ShallowWaters/#Shallow-Water-Model-(Julia)","page":"Shallow Water Model (Julia)","title":"Shallow Water Model (Julia)","text":"","category":"section"},{"location":"generated/ShallowWaters/","page":"Shallow Water Model (Julia)","title":"Shallow Water Model (Julia)","text":"Here we setup, run and plot a two-dimensional shallow water model configuration from ShallowWaters.jl","category":"page"},{"location":"generated/ShallowWaters/","page":"Shallow Water Model (Julia)","title":"Shallow Water Model (Julia)","text":"using ClimateModels, Pkg, Plots, NetCDF, Suppressor","category":"page"},{"location":"generated/ShallowWaters/#Formulate-Model","page":"Shallow Water Model (Julia)","title":"Formulate Model","text":"","category":"section"},{"location":"generated/ShallowWaters/","page":"Shallow Water Model (Julia)","title":"Shallow Water Model (Julia)","text":"URL=PackageSpec(url=\"https://github.com/milankl/ShallowWaters.jl\")\n\nparameters=Dict(:nx => 100, :ny => 50, :Lx => 2000e3, :nd=>500) #adjustable parameters\n\nfunction SWM(x)\n    pth=pwd()\n    cd(joinpath(x.folder,string(x.ID)))\n    (nx,ny)=(x.inputs[:nx],x.inputs[:ny])\n    (Lx,nd)=(x.inputs[:Lx],x.inputs[:nd])\n    L_ratio = nx / ny\n    @suppress run_model(;nx,Lx,L_ratio,Ndays=nd,output=true) #calling this may take several minutes (or more) depending on resolution\n    cd(pth)\nend","category":"page"},{"location":"generated/ShallowWaters/#Setup-Model","page":"Shallow Water Model (Julia)","title":"Setup Model","text":"","category":"section"},{"location":"generated/ShallowWaters/","page":"Shallow Water Model (Julia)","title":"Shallow Water Model (Julia)","text":"ModelConfig wraps up the model into a data structure, MC, which also includes e.g. the online location for the model repository, parameters, and a local folder path used later on.","category":"page"},{"location":"generated/ShallowWaters/","page":"Shallow Water Model (Julia)","title":"Shallow Water Model (Julia)","text":"MC=ModelConfig(model=URL,configuration=SWM,inputs=parameters)","category":"page"},{"location":"generated/ShallowWaters/","page":"Shallow Water Model (Julia)","title":"Shallow Water Model (Julia)","text":"The setup function then calls Pkg.develop and sets up the git log subfolder.","category":"page"},{"location":"generated/ShallowWaters/","page":"Shallow Water Model (Julia)","title":"Shallow Water Model (Julia)","text":"setup(MC)","category":"page"},{"location":"generated/ShallowWaters/#Run-Model","page":"Shallow Water Model (Julia)","title":"Run Model","text":"","category":"section"},{"location":"generated/ShallowWaters/","page":"Shallow Water Model (Julia)","title":"Shallow Water Model (Julia)","text":"The SWM model is run within the launch command which also updates the git log accordingly.","category":"page"},{"location":"generated/ShallowWaters/","page":"Shallow Water Model (Julia)","title":"Shallow Water Model (Julia)","text":"using ShallowWaters\nlaunch(MC)","category":"page"},{"location":"generated/ShallowWaters/#Plot-Results","page":"Shallow Water Model (Julia)","title":"Plot Results","text":"","category":"section"},{"location":"generated/ShallowWaters/","page":"Shallow Water Model (Julia)","title":"Shallow Water Model (Julia)","text":"Here we read temperature from the netcdf output file and and map it for time parameters[:nd]","category":"page"},{"location":"generated/ShallowWaters/","page":"Shallow Water Model (Julia)","title":"Shallow Water Model (Julia)","text":"MCdir=joinpath(MC.folder,string(MC.ID))\nncfile = NetCDF.open(joinpath(MCdir,\"run0000\",\"sst.nc\"))\nsst = ncfile.vars[\"sst\"][:,:,:]\nimg=contourf(sst[:,:,parameters[:nd]]',c = :grays, clims=(-1.,1.), frmt=:png)","category":"page"},{"location":"generated/ShallowWaters/","page":"Shallow Water Model (Julia)","title":"Shallow Water Model (Julia)","text":"Alternatively, one can create an animated gif e.g. as shown here.","category":"page"},{"location":"generated/ShallowWaters/","page":"Shallow Water Model (Julia)","title":"Shallow Water Model (Julia)","text":"anim = @animate for t ∈ 1:parameters[:nd]+1\n    contourf(sst[:,:,t+1]',c = :grays, clims=(-1.,1.))\nend\ngif(anim, joinpath(MCdir,\"run0000\",\"sst.gif\"), fps = 40)","category":"page"},{"location":"generated/ShallowWaters/","page":"Shallow Water Model (Julia)","title":"Shallow Water Model (Julia)","text":"","category":"page"},{"location":"generated/ShallowWaters/","page":"Shallow Water Model (Julia)","title":"Shallow Water Model (Julia)","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/#examples","page":"Guide ","title":"Example Guide","text":"","category":"section"},{"location":"examples/","page":"Guide ","title":"Guide ","text":"The next sections are examples which broadly fall into two categories.","category":"page"},{"location":"examples/#Workflows-That-Run-Models","page":"Guide ","title":"Workflows That Run Models","text":"","category":"section"},{"location":"examples/","page":"Guide ","title":"Guide ","text":"random walk model (0D)\nShallowWaters.jl model (2D)\nSPEEDY atmosphere model (3D)\nMITgcm general circulation model","category":"page"},{"location":"examples/#Workflows-Using-Remote-Files","page":"Guide ","title":"Workflows Using Remote Files","text":"","category":"section"},{"location":"examples/","page":"Guide ","title":"Guide ","text":"CMIP6 model output : access climate model output from cloud storage and compute temperature time series and global maps.","category":"page"},{"location":"examples/#examples-outline","page":"Guide ","title":"Outline Of The Examples","text":"","category":"section"},{"location":"examples/","page":"Guide ","title":"Guide ","text":"Pages = [\n    \"generated/defaults.md\",\n    \"generated/RandomWalker.md\",\n    \"generated/ShallowWaters.md\",\n    \"generated/MITgcm.md\",\n    \"generated/Speedy.md\",\n    \"generated/CMIP6.md\",\n]\nDepth = 2","category":"page"},{"location":"generated/MITgcm/","page":"General Circulation Model (Fortran)","title":"General Circulation Model (Fortran)","text":"EditURL = \"https://github.com/gaelforget/ClimateModels.jl/blob/master/examples/MITgcm.jl\"","category":"page"},{"location":"generated/MITgcm/#General-Circulation-Model-(Fortran)","page":"General Circulation Model (Fortran)","title":"General Circulation Model (Fortran)","text":"","category":"section"},{"location":"generated/MITgcm/","page":"General Circulation Model (Fortran)","title":"General Circulation Model (Fortran)","text":"Here we setup and run MITgcm. This general circulation model can simulate the Ocean (as done here), Atmosphere (plot below), and other components of the climate system accross a wide range of scales and configurations.","category":"page"},{"location":"generated/MITgcm/","page":"General Circulation Model (Fortran)","title":"General Circulation Model (Fortran)","text":"using ClimateModels, MITgcmTools, MeshArrays, Plots, Suppressor","category":"page"},{"location":"generated/MITgcm/","page":"General Circulation Model (Fortran)","title":"General Circulation Model (Fortran)","text":"(Image: fig1)","category":"page"},{"location":"generated/MITgcm/#Setup-Model","page":"General Circulation Model (Fortran)","title":"Setup Model","text":"","category":"section"},{"location":"generated/MITgcm/","page":"General Circulation Model (Fortran)","title":"General Circulation Model (Fortran)","text":"The most standard MITgcm configurations (verification experiments) are all readily available via MITgcmTools.jl's MITgcm_config function.","category":"page"},{"location":"generated/MITgcm/","page":"General Circulation Model (Fortran)","title":"General Circulation Model (Fortran)","text":"MC=MITgcm_config(configuration=\"global_with_exf\")","category":"page"},{"location":"generated/MITgcm/","page":"General Circulation Model (Fortran)","title":"General Circulation Model (Fortran)","text":"The setup function links input files to the run/ folder (see below).","category":"page"},{"location":"generated/MITgcm/","page":"General Circulation Model (Fortran)","title":"General Circulation Model (Fortran)","text":"setup(MC)","category":"page"},{"location":"generated/MITgcm/","page":"General Circulation Model (Fortran)","title":"General Circulation Model (Fortran)","text":"Model parameters can then be accessed via MC.inputs.","category":"page"},{"location":"generated/MITgcm/","page":"General Circulation Model (Fortran)","title":"General Circulation Model (Fortran)","text":"MC.inputs","category":"page"},{"location":"generated/MITgcm/#Build-mitgcmuv","page":"General Circulation Model (Fortran)","title":"Build mitgcmuv","text":"","category":"section"},{"location":"generated/MITgcm/","page":"General Circulation Model (Fortran)","title":"General Circulation Model (Fortran)","text":"The model executable mitcmuv is normally found in the build/ subfolder of the selected experiment. If mitcmuv is not found at this stage then it is assumed that the chosen model configuration still needs to be compiled (once, via the build function). This might take a lot longer than a normal model run due to the one-time cost of compiling the model.","category":"page"},{"location":"generated/MITgcm/","page":"General Circulation Model (Fortran)","title":"General Circulation Model (Fortran)","text":"if isa(MITgcm_path,Array) #MITgcmTools > v0.1.22\n\tbuild(MC,\"--allow-skip\")\nelse\n\tbuild(MC)\nend","category":"page"},{"location":"generated/MITgcm/#Run-Model","page":"General Circulation Model (Fortran)","title":"Run Model","text":"","category":"section"},{"location":"generated/MITgcm/","page":"General Circulation Model (Fortran)","title":"General Circulation Model (Fortran)","text":"The main model computation takes place via the launch function.","category":"page"},{"location":"generated/MITgcm/","page":"General Circulation Model (Fortran)","title":"General Circulation Model (Fortran)","text":"launch(MC)","category":"page"},{"location":"generated/MITgcm/","page":"General Circulation Model (Fortran)","title":"General Circulation Model (Fortran)","text":"MITgcm will output files in the run/ folder incl. the standard output.txt file.","category":"page"},{"location":"generated/MITgcm/","page":"General Circulation Model (Fortran)","title":"General Circulation Model (Fortran)","text":"rundir=joinpath(MC.folder,string(MC.ID),\"run\")\nfileout=joinpath(rundir,\"output.txt\")\nreadlines(fileout)","category":"page"},{"location":"generated/MITgcm/#Model-Monitor","page":"General Circulation Model (Fortran)","title":"Model Monitor","text":"","category":"section"},{"location":"generated/MITgcm/","page":"General Circulation Model (Fortran)","title":"General Circulation Model (Fortran)","text":"Often, the term monitor in climate modeling denotes a statement / counter printed to standard model output (text file) at regular intervals to monitor the model's integration through time. In the example below, we use global mean temperature which is reported every time step as dynstat_theta_mean in the MITgcm output.txt file.","category":"page"},{"location":"generated/MITgcm/","page":"General Circulation Model (Fortran)","title":"General Circulation Model (Fortran)","text":"filstat=joinpath(rundir,\"onestat.txt\")\nrun(pipeline(`grep dynstat_theta_mean $(fileout)`,filstat))\n\ntmp0 = read(filstat,String)\ntmp0 = split(tmp0,\"\\n\")\nTmean=[parse(Float64,split(tmp0[i],\"=\")[2]) for i in 1:length(tmp0)-1]\np=plot(Tmean,frmt=:png)","category":"page"},{"location":"generated/MITgcm/#Plot-Results","page":"General Circulation Model (Fortran)","title":"Plot Results","text":"","category":"section"},{"location":"generated/MITgcm/","page":"General Circulation Model (Fortran)","title":"General Circulation Model (Fortran)","text":"As models run through time, they typically output snapshots and/or time-averages of state variables in binary or netcdf format for example. Afterwards, or even while the model runs, one can reread this output. Here, for example, we plot the temperature map after 20 time steps (T.0000000020) this way by using the convenient MITgcmTools.jl and MeshArrays.jl packages which simplify the handling of files and data.","category":"page"},{"location":"generated/MITgcm/","page":"General Circulation Model (Fortran)","title":"General Circulation Model (Fortran)","text":"XC=read_mdsio(rundir,\"XC\"); siz=size(XC)\n\nmread(xx::Array,x::MeshArray) = read(xx,x)\nfunction mread(fil::String,x::MeshArray)\n\td=dirname(fil)\n\tb=basename(fil)[1:end-5]\n\tread(read_mdsio(d,b),x)\nend\n\nγ=gcmgrid(rundir,\"PeriodicChannel\",1,fill(siz,1), [siz[1] siz[2]], eltype(XC), mread, write)\nΓ=GridLoad(γ)\nT=read_mdsio(rundir,\"T.0000000020\")\nh=heatmap(T[:,:,1]',frmt=:png)","category":"page"},{"location":"generated/MITgcm/#Workflow-Outline","page":"General Circulation Model (Fortran)","title":"Workflow Outline","text":"","category":"section"},{"location":"generated/MITgcm/","page":"General Circulation Model (Fortran)","title":"General Circulation Model (Fortran)","text":"ClimateModels.jl additionally supports workflow documentation using git. Here we summarize this workflow's record.","category":"page"},{"location":"generated/MITgcm/","page":"General Circulation Model (Fortran)","title":"General Circulation Model (Fortran)","text":"git_log_show(MC)","category":"page"},{"location":"generated/MITgcm/","page":"General Circulation Model (Fortran)","title":"General Circulation Model (Fortran)","text":"","category":"page"},{"location":"generated/MITgcm/","page":"General Circulation Model (Fortran)","title":"General Circulation Model (Fortran)","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/RandomWalker/","page":"Default Behavior (Julia Function)","title":"Default Behavior (Julia Function)","text":"EditURL = \"https://github.com/gaelforget/ClimateModels.jl/blob/master/examples/RandomWalker.jl\"","category":"page"},{"location":"generated/RandomWalker/#Default-Behavior-(Julia-Function)","page":"Default Behavior (Julia Function)","title":"Default Behavior (Julia Function)","text":"","category":"section"},{"location":"generated/RandomWalker/","page":"Default Behavior (Julia Function)","title":"Default Behavior (Julia Function)","text":"Here we setup, run and plot a two-dimensional random walker path.","category":"page"},{"location":"generated/RandomWalker/","page":"Default Behavior (Julia Function)","title":"Default Behavior (Julia Function)","text":"using ClimateModels, Pkg, Plots, CSV, DataFrames","category":"page"},{"location":"generated/RandomWalker/#Formulate-Model","page":"Default Behavior (Julia Function)","title":"Formulate Model","text":"","category":"section"},{"location":"generated/RandomWalker/","page":"Default Behavior (Julia Function)","title":"Default Behavior (Julia Function)","text":"This simple model steps randomly, N times, on a x,y plane starting from 0,0.","category":"page"},{"location":"generated/RandomWalker/","page":"Default Behavior (Julia Function)","title":"Default Behavior (Julia Function)","text":"function RandomWalker(x)\n    #model run\n    nSteps=x.inputs[\"nSteps\"]\n    m=zeros(nSteps,2)\n    [m[i,j]=m[i-1,j]+rand((-1,1)) for j in 1:2, i in 2:nSteps]\n\n    #output to file\n    df = DataFrame(x = m[:,1], y = m[:,2])\n    fil=joinpath(x.folder,string(x.ID),\"RandomWalker.csv\")\n    CSV.write(fil, df)\n\n    return m\nend","category":"page"},{"location":"generated/RandomWalker/#Setup-And-Run-Model","page":"Default Behavior (Julia Function)","title":"Setup And Run Model","text":"","category":"section"},{"location":"generated/RandomWalker/","page":"Default Behavior (Julia Function)","title":"Default Behavior (Julia Function)","text":"ModelConfig defines the model into data structure m\nsetup prepares the model to run in a temporary folder\nlaunch runs the RandomWalker model which writes results to file","category":"page"},{"location":"generated/RandomWalker/","page":"Default Behavior (Julia Function)","title":"Default Behavior (Julia Function)","text":"Note: RandomWalker returns results also directly as an Array, but this is generally not an option for most, larger, models","category":"page"},{"location":"generated/RandomWalker/","page":"Default Behavior (Julia Function)","title":"Default Behavior (Julia Function)","text":"m=ModelConfig(model=RandomWalker,inputs=Dict(\"nSteps\" => 1000))\nsetup(m)\nlaunch(m)\nm","category":"page"},{"location":"generated/RandomWalker/#Exercise","page":"Default Behavior (Julia Function)","title":"Exercise","text":"","category":"section"},{"location":"generated/RandomWalker/","page":"Default Behavior (Julia Function)","title":"Default Behavior (Julia Function)","text":"Change the duration parameter (nSteps) and update the following cells?","category":"page"},{"location":"generated/RandomWalker/","page":"Default Behavior (Julia Function)","title":"Default Behavior (Julia Function)","text":"m.inputs[\"nSteps\"]=10000\nsetup(m)\nlaunch(m)","category":"page"},{"location":"generated/RandomWalker/#Plot-Results","page":"Default Behavior (Julia Function)","title":"Plot Results","text":"","category":"section"},{"location":"generated/RandomWalker/","page":"Default Behavior (Julia Function)","title":"Default Behavior (Julia Function)","text":"Afterwards, one often uses model output for further analysis. Here we plot the random walker path from the csv output file.","category":"page"},{"location":"generated/RandomWalker/","page":"Default Behavior (Julia Function)","title":"Default Behavior (Julia Function)","text":"fil=joinpath(m.folder,string(m.ID),\"RandomWalker.csv\")\noutput = CSV.File(fil) |> DataFrame\nimg=plot(output.x,output.y,frmt=:png,leg=:none)","category":"page"},{"location":"generated/RandomWalker/#Workflow-Outline","page":"Default Behavior (Julia Function)","title":"Workflow Outline","text":"","category":"section"},{"location":"generated/RandomWalker/","page":"Default Behavior (Julia Function)","title":"Default Behavior (Julia Function)","text":"Workflow steps are documented using git. Here we show the git record for this workflow (in timeline order).","category":"page"},{"location":"generated/RandomWalker/","page":"Default Behavior (Julia Function)","title":"Default Behavior (Julia Function)","text":"git_log_show(m)","category":"page"},{"location":"generated/RandomWalker/","page":"Default Behavior (Julia Function)","title":"Default Behavior (Julia Function)","text":"","category":"page"},{"location":"generated/RandomWalker/","page":"Default Behavior (Julia Function)","title":"Default Behavior (Julia Function)","text":"This page was generated using Literate.jl.","category":"page"},{"location":"generated/defaults/","page":"Default Behavior (Julia Package)","title":"Default Behavior (Julia Package)","text":"EditURL = \"https://github.com/gaelforget/ClimateModels.jl/blob/master/examples/defaults.jl\"","category":"page"},{"location":"generated/defaults/#Default-Behavior-(Julia-Package)","page":"Default Behavior (Julia Package)","title":"Default Behavior (Julia Package)","text":"","category":"section"},{"location":"generated/defaults/","page":"Default Behavior (Julia Package)","title":"Default Behavior (Julia Package)","text":"By default it is assumed that:","category":"page"},{"location":"generated/defaults/","page":"Default Behavior (Julia Package)","title":"Default Behavior (Julia Package)","text":"The model is a Julia package to be downloaded via git clone from the repository URL.\nThe cloned package's test/runtests.jl is then used to run the model.","category":"page"},{"location":"generated/defaults/","page":"Default Behavior (Julia Package)","title":"Default Behavior (Julia Package)","text":"But it should immediately be noted that anything in the ClimateModels.jl interface can be customized differently.","category":"page"},{"location":"generated/defaults/","page":"Default Behavior (Julia Package)","title":"Default Behavior (Julia Package)","text":"This will become clear in the other examples that largely differ in the specifics while using the same, uniform, interface.","category":"page"},{"location":"generated/defaults/","page":"Default Behavior (Julia Package)","title":"Default Behavior (Julia Package)","text":"using ClimateModels, Pkg","category":"page"},{"location":"generated/defaults/","page":"Default Behavior (Julia Package)","title":"Default Behavior (Julia Package)","text":"url=PackageSpec(url=\"https://github.com/JuliaOcean/AirSeaFluxes.jl\")\nMC=ModelConfig(model=url)","category":"page"},{"location":"generated/defaults/","page":"Default Behavior (Julia Package)","title":"Default Behavior (Julia Package)","text":"setup(MC)\nlaunch(MC)","category":"page"},{"location":"generated/defaults/","page":"Default Behavior (Julia Package)","title":"Default Behavior (Julia Package)","text":"","category":"page"},{"location":"generated/defaults/","page":"Default Behavior (Julia Package)","title":"Default Behavior (Julia Package)","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#ClimateModels.jl","page":"Home","title":"ClimateModels.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package provides a uniform interface to climate models of varying complexity and completeness. Models that range from low dimensional to whole Earth System models can be run and/or analyzed via this framework. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"It also supports e.g. cloud computing workflows that start from previous model output available over the internet. Version control, using git, is included to allow for workflow documentation and reproducibility.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Please look at Examples and Manual for more detail.","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nThis package is still in early development stage. Breaking changes remain likely.","category":"page"},{"location":"#Package-Features","page":"Home","title":"Package Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Climate Model Interface\nTracked Worklow Framework\nCloud + On-Premise File Support","category":"page"},{"location":"#main-contents","page":"Home","title":"Table Of Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"functionalities.md\",\n    \"examples.md\",\n]\nDepth = 2","category":"page"},{"location":"generated/Speedy/","page":"SPEEDY Atmosphere (Fortran)","title":"SPEEDY Atmosphere (Fortran)","text":"EditURL = \"https://github.com/gaelforget/ClimateModels.jl/blob/master/examples/Speedy.jl\"","category":"page"},{"location":"generated/Speedy/#SPEEDY-Atmosphere-(Fortran)","page":"SPEEDY Atmosphere (Fortran)","title":"SPEEDY Atmosphere (Fortran)","text":"","category":"section"},{"location":"generated/Speedy/","page":"SPEEDY Atmosphere (Fortran)","title":"SPEEDY Atmosphere (Fortran)","text":"Here we setup, run and plot a fast atmospheric model called speedy.f90 which stands for Simplified Parameterizations, privitivE-Equation DYnamics. Documentation can be found here and here.","category":"page"},{"location":"generated/Speedy/","page":"SPEEDY Atmosphere (Fortran)","title":"SPEEDY Atmosphere (Fortran)","text":"using ClimateModels, Pkg, Plots, NetCDF\nusing Suppressor, OrderedCollections, Git, UUIDs\n\nimport ClimateModels: build, setup, launch","category":"page"},{"location":"generated/Speedy/#Define-Model-Interface","page":"SPEEDY Atmosphere (Fortran)","title":"Define Model Interface","text":"","category":"section"},{"location":"generated/Speedy/","page":"SPEEDY Atmosphere (Fortran)","title":"SPEEDY Atmosphere (Fortran)","text":"\"\"\"\n    struct SPEEDY_config <: AbstractModelConfig\n\nConcrete type of `AbstractModelConfig` for `SPEEDY` model.\n\"\"\"\nBase.@kwdef struct SPEEDY_config <: AbstractModelConfig\n    model :: String = \"speedy\"\n    configuration :: String = \"default\"\n    options :: OrderedDict{Any,Any} = OrderedDict{Any,Any}()\n    inputs :: OrderedDict{Any,Any} = OrderedDict{Any,Any}()\n    outputs :: OrderedDict{Any,Any} = OrderedDict{Any,Any}()\n    status :: OrderedDict{Any,Any} = OrderedDict{Any,Any}()\n    channel :: Channel{Any} = Channel{Any}(10)\n    folder :: String = tempdir()\n    ID :: UUID = UUIDs.uuid4()\nend\n\nfunction setup(x :: SPEEDY_config)\n    !isdir(joinpath(x.folder)) ? mkdir(joinpath(x.folder)) : nothing\n    pth=joinpath(x.folder,string(x.ID))\n    !isdir(pth) ? mkdir(pth) : nothing\n\n    url=\"https://github.com/gaelforget/speedy.f90\"\n    @suppress run(`$(git()) clone -b more_diags $url $pth`)\n\n    !isdir(joinpath(pth,\"log\")) ? git_log_init(x) : nothing\n\n    put!(x.channel,launch)\nend\n\nfunction build(x :: SPEEDY_config)\n    pth0=pwd()\n    pth=joinpath(x.folder,string(x.ID))\n\n    cd(pth)\n    #ENV[\"NETCDF\"] = \"/usr/local/Cellar/netcdf/4.7.3_2/\" #may differ between computers\n    ENV[\"NETCDF\"] = \"/usr/\" #may differ between computers\n    @suppress run(`bash build.sh`)\n    cd(pth0)\nend\n\nfunction launch(x::SPEEDY_config)\n    pth0=pwd()\n    pth=joinpath(x.folder,string(x.ID))\n    cd(pth)\n    @suppress run(`bash run.sh`)\n    cd(pth0)\nend","category":"page"},{"location":"generated/Speedy/#Setup,-Build,-And-Launch","page":"SPEEDY Atmosphere (Fortran)","title":"Setup, Build, And Launch","text":"","category":"section"},{"location":"generated/Speedy/","page":"SPEEDY Atmosphere (Fortran)","title":"SPEEDY Atmosphere (Fortran)","text":"MC=SPEEDY_config()\nsetup(MC)\nbuild(MC)\nlaunch(MC)","category":"page"},{"location":"generated/Speedy/#Read-Model-Output-And-Plot","page":"SPEEDY Atmosphere (Fortran)","title":"Read Model Output And Plot","text":"","category":"section"},{"location":"generated/Speedy/","page":"SPEEDY Atmosphere (Fortran)","title":"SPEEDY Atmosphere (Fortran)","text":"function plot(x::SPEEDY_config,varname=\"hfluxn\")\n    pth=joinpath(MC.folder,string(MC.ID))\n    ncfile = NetCDF.open(joinpath(pth,\"rundir\",\"198201072200.nc\"))\n    tmp = ncfile.vars[varname][:,:,1,1]\n    contourf(tmp', frmt=:png,title=varname)\nend\n\nplot(MC,\"hfluxn\")","category":"page"},{"location":"generated/Speedy/#Model-Parameters","page":"SPEEDY Atmosphere (Fortran)","title":"Model Parameters","text":"","category":"section"},{"location":"generated/Speedy/","page":"SPEEDY Atmosphere (Fortran)","title":"SPEEDY Atmosphere (Fortran)","text":"import MITgcmTools: read_namelist\np=dirname(pathof(ClimateModels))\ninclude(joinpath(p,\"../examples/helper_functions.jl\"))\n\nnml=read_namelist(MC)\nnml[:params]","category":"page"},{"location":"generated/Speedy/#Time-Steps,-etc","page":"SPEEDY Atmosphere (Fortran)","title":"Time Steps, etc","text":"","category":"section"},{"location":"generated/Speedy/","page":"SPEEDY Atmosphere (Fortran)","title":"SPEEDY Atmosphere (Fortran)","text":"nml[:date]","category":"page"},{"location":"generated/Speedy/","page":"SPEEDY Atmosphere (Fortran)","title":"SPEEDY Atmosphere (Fortran)","text":"","category":"page"},{"location":"generated/Speedy/","page":"SPEEDY Atmosphere (Fortran)","title":"SPEEDY Atmosphere (Fortran)","text":"This page was generated using Literate.jl.","category":"page"}]
}
