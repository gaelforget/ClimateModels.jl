var documenterSearchIndex = {"docs":
[{"location":"functionalities/#manual","page":"Manual","title":"User Manual","text":"","category":"section"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"Here we document key functionalities offered in ClimateModels.jl","category":"page"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"Climate Model Interface\nTracked Worklow Framework\nCloud + On-Premise File Support","category":"page"},{"location":"functionalities/#Climate-Model-Interface","page":"Manual","title":"Climate Model Interface","text":"","category":"section"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"The climate model interface is based on the ModelConfig data structure and a series of methods like setup, build, and launch. The typical sequence is shown just below where f is a function that (1) receives a ModelConfig as its only input argument, and (2) gets called via launch. ","category":"page"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"using ClimateModels #hide\nf=ClimateModels.RandomWalker #hide\nMC=ModelConfig(model=f)\nsetup(MC)\nbuild(MC)\nlaunch(MC)","category":"page"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"The ModelConfig called MC is summarized using the show method which here reveals that f is just an alias for ClimateModels.RandomWalker. The run folder name can be accessed directly using pathof.","category":"page"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"MC #hide","category":"page"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"The content of the run folder is readily inspected using readdir.","category":"page"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"readdir(pathof(MC)) #hide","category":"page"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"Here launch(MC) has completed, RandomWalker.csv is a file that was generated by function f, and log is the log subfolder that was created by setup. ","category":"page"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"The workflow log is retrieved using the log function. ","category":"page"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"log(MC) #hide","category":"page"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"This highlights that Project.toml and Manifest.toml for the environment being used have been archived. This happens during setup to document all dependencies and make the workflow reproducible.","category":"page"},{"location":"functionalities/#Generalization","page":"Manual","title":"Generalization","text":"","category":"section"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"A key point is that everything can be customized to, e.g., use popular models previously written in Fortran or C just as simply. This typically involves defining a new concrete type of AbstractModelConfig and providing a customized build method to compile the model. ","category":"page"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"This approach is illustrated in the Examples as well as in the suite of general circulation model examples that uses the customized interface elements provided by MITgcmTools.jl for MITgcm.","category":"page"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"The idea in the longer term is that for popular models the customized interface elements would be provided via a dedicated package (e.g. MITgcmTools.jl). These customized interfaces would thus be maintained independently by developers and users most familiar with each model.","category":"page"},{"location":"functionalities/#Git-Support","page":"Manual","title":"Git Support","text":"","category":"section"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"The setup method normally calls log to set up a temporary run folder with a git enabled subfolder called log. This allows for recording each workflow step, using log functions listed below.","category":"page"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"log","category":"page"},{"location":"functionalities/#Base.log","page":"Manual","title":"Base.log","text":"log(x :: AbstractModelConfig)\n\nShow the record of git commits that have taken place in the log folder.\n\n\n\n\n\nlog(x :: AbstractModelConfig, commit_msg :: String; \n             fil=\"\", msg=\"\", init=false, prm=false)\n\ninit=true : create log subfolder, initialize git, and commit initial README.md\nprm=true  : add files found in input or tracked_parameters/ (if any) to git log\nfil!=\"\"   : commit changes to file log/fil with message commit_msg. If log/fil is               unknown to git (i.e. commit errors out) then try adding log/fil first. \n\nusing ClimateModels, Suppressor, OrderedCollections\n\nf=ClimateModels.RandomWalker\ni=OrderedDict(); i[\"NS\"]=100\n\ntmp=ModelConfig(model=f,inputs=i)\nsetup(tmp)\nbuild(tmp)\nlaunch(tmp)\n\nlog(tmp,\n    \"update tracked_parameters.toml (or skip)\", \n    fil=\"tracked_parameters.toml\")\n@suppress log(tmp)\nisa(tmp,AbstractModelConfig)\n\n# output\n\ntrue\n\n\n\n\n\n","category":"function"},{"location":"functionalities/#Cloud-Support","page":"Manual","title":"Cloud Support","text":"","category":"section"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"There are various ways that model output gets archived, distributed, and retrieved from the internet. In some cases downloading data can be the most convenient approach. In others it can be more advantageous to compute in the cloud and only download final results for plotting (e.g. cmip).","category":"page"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"cmip","category":"page"},{"location":"functionalities/#ClimateModels.cmip","page":"Manual","title":"ClimateModels.cmip","text":"cmip(institution_id,source_id,variable_id)\n\nAccess CMIP6 climate model archive (https://bit.ly/2WiWmoh) via AWS.jl and Zarr.jl and compute (1) time mean global map and (2) time evolving global mean.\n\nThis example was partly inspired by @rabernat 's https://bit.ly/2VRMgvl notebook\n\nusing ClimateModels\n(mm,gm,meta)=cmip()\nnm=meta[\"long_name\"]*\" in \"*meta[\"units\"]\n\nusing Plots\nheatmap(mm[\"lon\"], mm[\"lat\"], transpose(mm[\"m\"]),\n        title=nm*\" (time mean)\")\nplot(gm[\"t\"][1:12:end],gm[\"y\"][1:12:end],xlabel=\"time\",ylabel=nm,\n     title=meta[\"institution_id\"]*\" (global mean, month by month)\")\ndisplay.([plot!(gm[\"t\"][i:12:end],gm[\"y\"][i:12:end], leg = false) for i in 2:12])\n\n\n\n\n\n\n\n","category":"function"},{"location":"functionalities/#API-Reference","page":"Manual","title":"API Reference","text":"","category":"section"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"","category":"page"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"ModelConfig","category":"page"},{"location":"functionalities/#ClimateModels.ModelConfig","page":"Manual","title":"ClimateModels.ModelConfig","text":"struct ModelConfig <: AbstractModelConfig\n\nmodel :: Union{Function,String,Pkg.Types.PackageSpec} = \"anonymous\"\nconfiguration :: Union{Function,String} = \"anonymous\"\noptions :: OrderedDict{Any,Any} = OrderedDict{Any,Any}()\ninputs :: OrderedDict{Any,Any} = OrderedDict{Any,Any}()\noutputs :: OrderedDict{Any,Any} = OrderedDict{Any,Any}()\nstatus :: OrderedDict{Any,Any} = OrderedDict{Any,Any}()\nchannel :: Channel{Any} = Channel{Any}(10) \nfolder :: String = tempdir()\nID :: UUID = UUIDs.uuid4()\n\n\n\n\n\n","category":"type"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"setup\nbuild\nlaunch\nshow\npathof\nreaddir\nclean","category":"page"},{"location":"functionalities/#ClimateModels.setup","page":"Manual","title":"ClimateModels.setup","text":"setup(x)\n\nDefaults to default_ClimateModelSetup(x). Can be expected to be  specialized for most concrete types of AbstractModelConfig\n\nf=ClimateModels.RandomWalker\ntmp=ModelConfig(model=f)\nsetup(tmp)\n\n\n\n\n\n","category":"function"},{"location":"functionalities/#ClimateModels.build","page":"Manual","title":"ClimateModels.build","text":"build(x)\n\nDefaults to default_ClimateModelBuild(x). Can be expected to be  specialized for most concrete types of AbstractModelConfig\n\nusing ClimateModels\ntmp=ModelConfig(model=ClimateModels.RandomWalker)\nsetup(tmp)\nbuild(tmp)\n\nisa(tmp,AbstractModelConfig)\n\n# output\n\ntrue\n\n\n\n\n\n","category":"function"},{"location":"functionalities/#ClimateModels.launch","page":"Manual","title":"ClimateModels.launch","text":"launch(x)\n\nDefaults to default_ClimateModelLaunch(x) which consists in take!(x) for AbstractModelConfig. Can be expected to be specialized for most  concrete types of AbstractModelConfig\n\nf=ClimateModels.RandomWalker\ntmp=ModelConfig(model=f)\nsetup(tmp)\nbuild(tmp)\nlaunch(tmp)\n\n\n\n\n\n","category":"function"},{"location":"functionalities/#Base.show","page":"Manual","title":"Base.show","text":"show(io::IO, z::AbstractModelConfig)\n\ntmp=ModelConfig(model=ClimateModels.RandomWalker)\nsetup(tmp)\nshow(tmp)\n\n\n\n\n\n","category":"function"},{"location":"functionalities/#Base.pathof","page":"Manual","title":"Base.pathof","text":"pathof(x::AbstractModelConfig)\n\nReturns the run directory path for x ; i.e. joinpath(x.folder,string(x.ID))\n\n\n\n\n\n","category":"function"},{"location":"functionalities/#Base.Filesystem.readdir","page":"Manual","title":"Base.Filesystem.readdir","text":"readdir(x::AbstractModelConfig)\n\nSame as readdir(pathof(x)).\n\n\n\n\n\n","category":"function"},{"location":"functionalities/#ClimateModels.clean","page":"Manual","title":"ClimateModels.clean","text":"clean(x :: AbstractModelConfig)\n\nCancel any remaining task (x.channel) and rm the run directory (pathof(x))\n\ntmp=ModelConfig(model=ClimateModels.RandomWalker)\nsetup(tmp)\nclean(tmp)\n\n\n\n\n\n","category":"function"},{"location":"examples/#examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"The examples fall, broadly, into two categories : Workflows That Run Models and Workflows That Replay Models' output. The distinction is not strict though, as one model often depends on another model's output. The random walk model example is presented in greater detail in the Climate Model Interface section to further illustrate how things work.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Trying Out The Examples provides directions for users who'd like to run, modify, or experiment with the notebooks. Doing It Yourself outlines simple ways that models can be added to the framework. The examples presented here were built in this fashion.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"In the list below, the core language of each model is indicated and the models are sorted, more or less, by increasing dimensionality / problem size. The example set, collectively, demonstrates that the Climate Model Interface is applicable to a wide range of models, computational languages, and problem sizes.","category":"page"},{"location":"examples/#Workflows-That-Run-Models","page":"Examples","title":"Workflows That Run Models","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"random walk model (Julia) ➭ code link, download link\nShallowWaters.jl model (Julia) ➭ code link, download link\nOceananigans.jl model (Julia) ➭ code link, download link\nHector global climate model (C++) ➭ code link, download link\nFaIR global climate model (Python) ➭ code link, download link\nSPEEDY atmosphere model (3D) (Fortran90) ➭ code link, download link\nMITgcm general circulation model (Fortran) ➭ code link, download link","category":"page"},{"location":"examples/#Workflows-That-Replay-Models","page":"Examples","title":"Workflows That Replay Models","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"CMIP6 model output ➭ code link, download link\nIPCC report 2021 ➭ code link, download link","category":"page"},{"location":"examples/#Trying-Out-The-Examples","page":"Examples","title":"Trying Out The Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"The examples are most easily run using Pluto.jl. To this end, one just needs to copy the corresponding code link (see above) and paste this URL into the Pluto.jl interface.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"One can also run the notebooks, e.g. RandomWalker.jl, either (1) by calling julia RandomWalker.jl at the shell command line or (2) by calling include(\"RandomWalker.jl\") at the julia REPL prompt. ","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"If the shell CLI or the julia REPL is used, however, one needs to download the notebook file and potentially Pkg.add a few packages beforehand (Pluto.jl does thiss automatically).","category":"page"},{"location":"examples/#System-Requirements","page":"Examples","title":"System Requirements","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"The pure julia examples should immediately work on any laptop or cloud computing service. ","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Examples that involve Fortran, Python, or C++ should work in all linux based environments (i.e. linux and macos). However, for example those that rely on a Fortran compiler (gfortran) and / or on Netcdf libraries (libnetcdf-dev,libnetcdff-dev) will require install gfortran). ","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"All requirements should be preinstalled in this cloud computer (see the JuliaClimate page for detail).","category":"page"},{"location":"examples/#Doing-It-Yourself","page":"Examples","title":"Doing It Yourself","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"tentative sketch:","category":"page"},{"location":"examples/#.-normal-user-mode","page":"Examples","title":"1. normal user mode","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"the case of a function\nthe full interface; create a concrete type\nparameters, log calls, trial and error, output files, etc","category":"page"},{"location":"examples/#.-package-developer-mode","page":"Examples","title":"2. package developer mode","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"the case of pkgSpec + function; package in development\nthe case of pkgSpec alone default behavior (Julia) ➭ code link, download link","category":"page"},{"location":"#ClimateModels.jl","page":"Home","title":"ClimateModels.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"warning: Warning\nThis package is still in early development stage. Breaking changes remain likely.","category":"page"},{"location":"","page":"Home","title":"Home","text":"This package provides a uniform interface to climate models of varying complexity and completeness. Models that range from low dimensional to whole Earth System models can be run and/or analyzed via this framework. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"It also supports e.g. cloud computing workflows that start from previous model output available over the internet. Version control, using git, is included to allow for workflow documentation and reproducibility.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The JuliaCon 2021 Presentation provides a brief (8') overview and demo of the package.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Please refer to Examples and User Manual  for more detail. ","category":"page"},{"location":"#main-contents","page":"Home","title":"Table Of Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"examples.md\",\n    \"functionalities.md\",\n]\nDepth = 2","category":"page"},{"location":"#JuliaCon-2021-Presentation","page":"Home","title":"JuliaCon 2021 Presentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Presentation recording\nPresentation notebook (html)\nPresentation notebook (jl)","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Screen Shot 2021-08-31 at 2 25 04 PM)","category":"page"}]
}
