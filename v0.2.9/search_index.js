var documenterSearchIndex = {"docs":
[{"location":"functionalities/#manual","page":"Manual","title":"User Manual","text":"","category":"section"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"using ClimateModels","category":"page"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"Here we document key functionalities offered in ClimateModels.jl","category":"page"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"Climate Model Interface\nTracked Worklow Framework\nCloud + On-Premise File Support","category":"page"},{"location":"functionalities/#Climate-Model-Interface","page":"Manual","title":"Climate Model Interface","text":"","category":"section"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"The interface ties the ModelConfig data structure with methods like setup, build, and launch. ","category":"page"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"For convenience, run executes all three steps at once. Using the simplified ModelConfig constructor, we then just write:","category":"page"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"f=ClimateModels.RandomWalker\nrun(ModelConfig(f))","category":"page"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"For most use cases, it can be practical to break things down. Let's start with defining the model.","category":"page"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"MC=ModelConfig(model=f)","category":"page"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"The typical sequence is shown below. Here f is a function that receives a ModelConfig as its only input argument. It gets called via launch and generates a file called RandomWalker.csv. ","category":"page"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"setup(MC)\nbuild(MC)\nlaunch(MC)","category":"page"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"note: Note\nOnce the initial model run has completed, it is always possible to add workflow steps via put! and launch.","category":"page"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"The run folder name and its content can be viewed using pathof and readdir, respectively.","category":"page"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"pathof(MC)","category":"page"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"readdir(MC)","category":"page"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"The log subfolder was created earlier by setup. The log function retrieves the workflow log. ","category":"page"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"log(MC)","category":"page"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"This highlights that Project.toml and Manifest.toml for the environment being used have been archived. This happens during setup to document all dependencies and make the workflow reproducible.","category":"page"},{"location":"functionalities/#Customization","page":"Manual","title":"Customization","text":"","category":"section"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"A key point is that everything can be customized to, e.g., use popular models previously written in Fortran or C just as simply. ","category":"page"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"The simplest way to use the ClimateModels.jl interface is to specify model directly as a function, and use defaults for everything else, as illustrated in random walk. Alternatively, the model name can be provided as a String and the main Function as the configuration, as in CMIP6.","category":"page"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"Often, however, one may want to define custom setup, build, or launch methods. To this end, one can define a concrete type of AbstractModelConfig using ModelConfig as a blueprint. This is the recommended approach when other languanges like Fortran or Python are involved (e.g., Hector, FaIR, SPEEDY, MITgcm). ","category":"page"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"note: Note\nDefining a concrete type of AbstractModelConfig can also be practical with pure Julia model, e.g. to speed up launch, generate ensembles, facilitate checkpointing, etc. That's the case in the Oceananigans.jl example.","category":"page"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"For popular models the customized interface elements can be provided via a dedicated package. This may allow them to be maintained independently by developers and users most familiar with each model. MITgcmTools.jl does this for MITgcm. It provides its own suite of examples that use the ClimateModels.jl interface.","category":"page"},{"location":"functionalities/#Tracked-Worklow-Support","page":"Manual","title":"Tracked Worklow Support","text":"","category":"section"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"The setup method normally calls log to create a temporary run folder with a git enabled subfolder called log. This allows for recording each workflow step, using log functions listed below.","category":"page"},{"location":"functionalities/#Cloud-And-File-Support","page":"Manual","title":"Cloud And File Support","text":"","category":"section"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"There are various ways that numerical model output gets archived, distributed, and retrieved from the internet. In some cases downloading data can be the most convenient approach. In others it can be more advantageous to compute in the cloud and only download final results for plotting. ","category":"page"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"ClimateModels.jl comes equiped with packages that read popular file formats used in climate modeling and science. Downloads.jl, CSV.jl, DataFrames.jl, NetCDF.jl, Zarr.jl, and TOML.jl are thus readily available when you install ClimateModels.jl. For instance, one can read the CSV file generated before as","category":"page"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"fil=joinpath(pathof(MC),\"RandomWalker.csv\")\nCSV=ClimateModels.CSV # hide\nDataFrame=ClimateModels.DataFrame #hide\nCSV.File(fil) |> DataFrame\nsummary(ans) # hide","category":"page"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"For additional examples covering other file formats, please refer to the IPCC report and CMIP6 archive notebooks and code links.","category":"page"},{"location":"functionalities/#Data-Structure","page":"Manual","title":"Data Structure","text":"","category":"section"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"ModelConfig\nModelConfig(::Function)\nPkgDevConfig","category":"page"},{"location":"functionalities/#ClimateModels.ModelConfig","page":"Manual","title":"ClimateModels.ModelConfig","text":"struct ModelConfig <: AbstractModelConfig\n\nmodel :: Union{Function,String,Pkg.Types.PackageSpec} = \"anonymous\"\nconfiguration :: Union{Function,String} = \"anonymous\"\noptions :: OrderedDict{Any,Any} = OrderedDict{Any,Any}()\ninputs :: OrderedDict{Any,Any} = OrderedDict{Any,Any}()\noutputs :: OrderedDict{Any,Any} = OrderedDict{Any,Any}()\nstatus :: OrderedDict{Any,Any} = OrderedDict{Any,Any}()\nchannel :: Channel{Any} = Channel{Any}(10) \nfolder :: String = tempdir()\nID :: UUID = UUIDs.uuid4()\n\n\n\n\n\n","category":"type"},{"location":"functionalities/#ClimateModels.ModelConfig-Tuple{Function}","page":"Manual","title":"ClimateModels.ModelConfig","text":"ModelConfig(func::Function,inputs::NamedTuple)\n\nSimplified constructor for case when model is a Function.\n\n\n\n\n\n","category":"method"},{"location":"functionalities/#ClimateModels.PkgDevConfig","page":"Manual","title":"ClimateModels.PkgDevConfig","text":"PkgDevConfig(url::String,func::Function,inputs::NamedTuple)\n\nSimplified constructor for case when model is a url (PackageSpec).\n\n\n\n\n\n","category":"function"},{"location":"functionalities/#Methods","page":"Manual","title":"Methods","text":"","category":"section"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"setup\nbuild\nlaunch\nrun\nlog","category":"page"},{"location":"functionalities/#ClimateModels.setup","page":"Manual","title":"ClimateModels.setup","text":"setup(x)\n\nDefaults to default_ClimateModelSetup(x). Can be expected to be  specialized for most concrete types of AbstractModelConfig\n\nf=ClimateModels.RandomWalker\ntmp=ModelConfig(model=f)\nsetup(tmp)\n\n\n\n\n\n","category":"function"},{"location":"functionalities/#ClimateModels.build","page":"Manual","title":"ClimateModels.build","text":"build(x)\n\nDefaults to default_ClimateModelBuild(x). Can be expected to be  specialized for most concrete types of AbstractModelConfig\n\nusing ClimateModels\ntmp=ModelConfig(model=ClimateModels.RandomWalker)\nsetup(tmp)\nbuild(tmp)\n\nisa(tmp,AbstractModelConfig) # hide\n\n\n\n\n\n","category":"function"},{"location":"functionalities/#ClimateModels.launch","page":"Manual","title":"ClimateModels.launch","text":"launch(x)\n\nDefaults to default_ClimateModelLaunch(x) which consists in take!(x) for AbstractModelConfig. Can be expected to be specialized for most  concrete types of AbstractModelConfig\n\nf=ClimateModels.RandomWalker\ntmp=ModelConfig(model=f)\nsetup(tmp)\nbuild(tmp)\nlaunch(tmp)\n\n\n\n\n\n","category":"function"},{"location":"functionalities/#Base.run","page":"Manual","title":"Base.run","text":"run(x :: AbstractModelConfig)\n\nShorthand for setup |> build |> launch, which returns AbstractModelConfig as output.\n\n\n\n\n\n","category":"function"},{"location":"functionalities/#Base.log","page":"Manual","title":"Base.log","text":"log(x :: AbstractModelConfig)\n\nShow the record of git commits that have taken place in the log folder.\n\n\n\n\n\nlog(x :: AbstractModelConfig, commit_msg :: String; \n             fil=\"\", msg=\"\", init=false, prm=false)\n\nKeyword arguments work like this \n\ninit==true : create log subfolder, initialize git, and commit initial README.md\nprm==true  : add files found in input or tracked_parameters/ (if any) to git log\n!isempty(fil) : commit changes to file log/$(fil) with message commit_msg.   If log/$(fil) is unknown to git (i.e. commit errors out) then try adding log/$(fil) first. \n\nand are mutually exclusive (i.e., use only one at a time).\n\nMC=run(ModelConfig(ClimateModels.RandomWalker,(NS=100,)))\nMC.inputs[:NS]=200\nmsg=\"update tracked_parameters.toml (or skip if up to date)\"\nlog(MC,msg,fil=\"tracked_parameters.toml\",prm=true)\nlog(MC)\n\n\n\n\n\n","category":"function"},{"location":"functionalities/#Utilities","page":"Manual","title":"Utilities","text":"","category":"section"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"pathof\nreaddir\nshow\nclean","category":"page"},{"location":"functionalities/#Base.pathof","page":"Manual","title":"Base.pathof","text":"pathof(x::AbstractModelConfig)\n\nReturns the run directory path for x ; i.e. joinpath(x.folder,string(x.ID))\n\n\n\n\n\n","category":"function"},{"location":"functionalities/#Base.Filesystem.readdir","page":"Manual","title":"Base.Filesystem.readdir","text":"readdir(x::AbstractModelConfig)\n\nSame as readdir(pathof(x)).\n\n\n\n\n\nreaddir(x::AbstractModelConfig,subfolder::String)\n\nSame as readdir(joinpath(pathof(x),subfolder)).\n\n\n\n\n\n","category":"function"},{"location":"functionalities/#Base.show","page":"Manual","title":"Base.show","text":"show(io::IO, z::AbstractModelConfig)\n\ntmp=ModelConfig(model=ClimateModels.RandomWalker)\nsetup(tmp)\nshow(tmp)\n\n\n\n\n\n","category":"function"},{"location":"functionalities/#ClimateModels.clean","page":"Manual","title":"ClimateModels.clean","text":"clean(x :: AbstractModelConfig)\n\nCancel any remaining task (x.channel) and rm the run directory (pathof(x))\n\ntmp=ModelConfig(model=ClimateModels.RandomWalker)\nsetup(tmp)\nclean(tmp)\n\n\n\n\n\n","category":"function"},{"location":"functionalities/#Notebooks","page":"Manual","title":"Notebooks","text":"","category":"section"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"notebooks.execute\nnotebooks.unroll\nnotebooks.open","category":"page"},{"location":"functionalities/#ClimateModels.notebooks.execute","page":"Manual","title":"ClimateModels.notebooks.execute","text":"execute(PlutoFile::String; EnvPath=\"\")\n\nCall notebooks.unroll\nInstantiate PlutoFile notebook environment\nExecute PlutoFile notebook workflow\nReturn ModelConfig\n\nMC=notebooks.execute(\"examples/CMIP6.jl\")\n\n\n\n\n\n","category":"function"},{"location":"functionalities/#ClimateModels.notebooks.unroll","page":"Manual","title":"ClimateModels.notebooks.unroll","text":"unroll(PlutoFile::String; EnvPath=\"\")\n\nExtract main program, Project.toml, and Manifest.toml from Pluto notebook file PlutoFile.  Save them in folder EnvPath (default = temporary folder). Typical use case is shown below.\n\np,f=notebooks.unroll(\"CMIP6.jl\")\ncd(p)\nPkg.activate(\"./\")\nPkg.instantiate()\ninclude(f)\n\n\n\n\n\n","category":"function"},{"location":"functionalities/#Base.open","page":"Manual","title":"Base.open","text":"open(;notebook_path=\"\",notebook_url=\"\",\n      pluto_url=\"http://localhost:1234/\",pluto_options=\"...\")\n\nOpen notebook in web-browser via Pluto. Important note: this assumes that the Pluto server is already running, e.g. from Pluto.run(), at URL pluto_url (by default, \"http://localhost:1234/\", should work on a laptop or desktop).\n\nSimple examples:\n\nnotebooks.open(notebook_path=\"examples/defaults.jl\")\n\nnbs=notebooks.list()\nnotebooks.open(notebook_url=nbs.url[1])\n\nMore examples:\n\nnbs=notebooks.list()\npath=joinpath(tempdir(),\"nbs\")\nnotebooks.download(path,nbs)\n\npluto_url=\"https://ade.ops.maap-project.org/serverpmohyfxe-ws-jupyter/server-3100/pluto/\"\n\nii=1\nnotebook_path=joinpath(path,nbs.folder[ii],nbs.file[ii])\nnotebooks.open(notebook_path=notebook_path)\n\n\n\n\n\n","category":"function"},{"location":"functionalities/#Package-Development-Mode","page":"Manual","title":"Package Development Mode","text":"","category":"section"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"The defining feature of this alternative method is specifying model as a PackageSpec. This makes setup install the chosen package using Pkg.develop. This allows for developing a package or using an unregistered package in the context of ClimateModels.jl. ","category":"page"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"There are two common cases: ","category":"page"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"if configuration is left undefined then launch will run the package test suite using Pkg.test as in this example (code link)\nif configuration is provided as a Function then launch will call it as illustrated in the ShallowWaters.jl example (code link)","category":"page"},{"location":"functionalities/","page":"Manual","title":"Manual","text":"note: Note\nAs an exercise, can you turn ShallowWaters.jl example into a normal user mode example?","category":"page"},{"location":"examples/#examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Pages = [\n    \"examples.md\",\n]\nDepth = 2","category":"page"},{"location":"examples/#Overview","page":"Examples","title":"Overview","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"The random walk model example is a good place to start. It is also presented in greater detail in the Climate Model Interface section to further illustrate how things work.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The examples generally fall into two categories : ","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Workflows That Run Models\nWorkflows That Replay Models' output","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"note: Note\nThis distinction between workflows is not strict, as one model often depends for its input on another model's output, and so forth.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The Trying Out The Examples section is for users who'd like to run or experiment with models. ","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"In User Manual, the Climate Model Interface section then outlines simple ways that models can be added to the framework. The examples presented here were built in this fashion.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"In the list below, the core language or file format is indicated for each model. The models are sorted, more or less, by increasing dimensionality / problem size. ","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"The example set, taken collectively, demonstrates that the Climate Model Interface is applicable to a wide range of models, computational languages, and problem sizes.","category":"page"},{"location":"examples/#Trying-Out-The-Examples","page":"Examples","title":"Trying Out The Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"The examples can be most easy to run using Pluto.jl. See these directions for how to do this in the cloud on your own computer.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"You can also run the notebooks from the command line interface (CLI) in a terminal window or in the Julia REPL. In this case, one may need to add packages beforehand (see Pkg.add). ","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"include(\"RandomWalker.jl\")","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Alternatively, you can run notebooks.execute  on Pluto notebook examples. Doing this will create a ModelConfig, add notebook dependencies in a local environment, and run the notebook main code.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"notebooks.execute(\"RandomWalker.jl\")","category":"page"},{"location":"examples/#Creating-Your-Own","page":"Examples","title":"Creating Your Own","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Please refer to the User Manual section, and Climate Model Interface in particular, for more on this. ","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"tip: Tip\nA good way to start can be by 1. converting a modeling workflow (setup, build, launch) into a Pluto notebook; 2. then using the ClimateModels.notebooks.execute function.","category":"page"},{"location":"examples/#Workflows-That-Run-Models","page":"Examples","title":"Workflows That Run Models","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"Random Walk model (Julia) ➭ code link\nShallowWaters.jl model (Julia) ➭ code link\nOceananigans.jl model (Julia) ➭ code link\nHector global climate model (C++) ➭ code link\nFaIR global climate model (Python) ➭ code link\nSPEEDY atmosphere model (Fortran90) ➭ code link\nMITgcm general circulation model (Fortran) ➭ code link","category":"page"},{"location":"examples/#Workflows-That-Replay-Models","page":"Examples","title":"Workflows That Replay Models","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"IPCC report 2021 (NetCDF, CSV) ➭ code link\nCMIP6 model output (Zarr) ➭ code link\nECMWF IFS 1km (NetCDF) ➭ code link","category":"page"},{"location":"examples/#*System-Requirements*","page":"Examples","title":"System Requirements","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"The pure Julia examples should immediately work on any laptop or cloud computing service. ","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Examples that involve Fortran, Python, or C++ should work in all linux based environments (i.e., Linux and macOS). However, those that rely on a Fortran compiler (gfortran) and / or on Netcdf libraries (libnetcdf-dev,libnetcdff-dev) will require that you e.g. install gfortran. ","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"tip: Tip\nAll requirements should be preinstalled in the JuliaClimate notebooks binder (see the JuliaClimate notebooks page for detail and directions).","category":"page"},{"location":"#ClimateModels.jl","page":"Home","title":"ClimateModels.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package provides a uniform interface to climate models of varying complexity and completeness. Models that range from low dimensional to whole Earth System models can be run and/or analyzed via this framework. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"It also supports e.g. cloud computing workflows that start from previous model output available over the internet. Version control, using git, is included to allow for workflow documentation and reproducibility.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The JuliaCon 2021 Presentation provides a brief (8') overview and demo of the package.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Please refer to Examples and User Manual  for more detail. ","category":"page"},{"location":"#main-contents","page":"Home","title":"Table Of Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"examples.md\",\n    \"functionalities.md\",\n]\nDepth = 2","category":"page"},{"location":"#JuliaCon-2021-Presentation","page":"Home","title":"JuliaCon 2021 Presentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Presentation recording\nPresentation notebook (html)\nPresentation notebook (jl)","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: Screen Shot 2021-08-31 at 2 25 04 PM)","category":"page"}]
}
